// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: party_affairs_news.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on News with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *News) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on News with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NewsMultiError, or nil if none found.
func (m *News) ValidateAll() error {
	return m.validate(true)
}

func (m *News) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Unit

	// no validation rules for Cover

	// no validation rules for Desc

	// no validation rules for Read

	// no validation rules for Content

	// no validation rules for ClassifyId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetNewsClassify()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewsValidationError{
					field:  "NewsClassify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewsValidationError{
					field:  "NewsClassify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewsClassify()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewsValidationError{
				field:  "NewsClassify",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewsValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewsValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewsValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NewsMultiError(errors)
	}

	return nil
}

// NewsMultiError is an error wrapping multiple validation errors returned by
// News.ValidateAll() if the designated constraints aren't met.
type NewsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewsMultiError) AllErrors() []error { return m }

// NewsValidationError is the validation error returned by News.Validate if the
// designated constraints aren't met.
type NewsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewsValidationError) ErrorName() string { return "NewsValidationError" }

// Error satisfies the builtin error interface
func (e NewsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNews.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewsValidationError{}

// Validate checks the field values on GetNewsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNewsRequestMultiError,
// or nil if none found.
func (m *GetNewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetNewsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNewsRequestMultiError(errors)
	}

	return nil
}

// GetNewsRequestMultiError is an error wrapping multiple validation errors
// returned by GetNewsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewsRequestMultiError) AllErrors() []error { return m }

// GetNewsRequestValidationError is the validation error returned by
// GetNewsRequest.Validate if the designated constraints aren't met.
type GetNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewsRequestValidationError) ErrorName() string { return "GetNewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewsRequestValidationError{}

// Validate checks the field values on PageNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageNewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageNewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageNewsRequestMultiError, or nil if none found.
func (m *PageNewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageNewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageNewsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageNewsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ClassifyId != nil {
		// no validation rules for ClassifyId
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if len(errors) > 0 {
		return PageNewsRequestMultiError(errors)
	}

	return nil
}

// PageNewsRequestMultiError is an error wrapping multiple validation errors
// returned by PageNewsRequest.ValidateAll() if the designated constraints
// aren't met.
type PageNewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageNewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageNewsRequestMultiError) AllErrors() []error { return m }

// PageNewsRequestValidationError is the validation error returned by
// PageNewsRequest.Validate if the designated constraints aren't met.
type PageNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageNewsRequestValidationError) ErrorName() string { return "PageNewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e PageNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageNewsRequestValidationError{}

// Validate checks the field values on PageNewsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageNewsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageNewsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageNewsReplyMultiError, or
// nil if none found.
func (m *PageNewsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageNewsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageNewsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageNewsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageNewsReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageNewsReplyMultiError(errors)
	}

	return nil
}

// PageNewsReplyMultiError is an error wrapping multiple validation errors
// returned by PageNewsReply.ValidateAll() if the designated constraints
// aren't met.
type PageNewsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageNewsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageNewsReplyMultiError) AllErrors() []error { return m }

// PageNewsReplyValidationError is the validation error returned by
// PageNewsReply.Validate if the designated constraints aren't met.
type PageNewsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageNewsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageNewsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageNewsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageNewsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageNewsReplyValidationError) ErrorName() string { return "PageNewsReplyValidationError" }

// Error satisfies the builtin error interface
func (e PageNewsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageNewsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageNewsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageNewsReplyValidationError{}

// Validate checks the field values on AddNewsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddNewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddNewsRequestMultiError,
// or nil if none found.
func (m *AddNewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := AddNewsRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUnit()) < 1 {
		err := AddNewsRequestValidationError{
			field:  "Unit",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCover()) < 1 {
		err := AddNewsRequestValidationError{
			field:  "Cover",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := AddNewsRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := AddNewsRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassifyId() <= 0 {
		err := AddNewsRequestValidationError{
			field:  "ClassifyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddNewsRequestMultiError(errors)
	}

	return nil
}

// AddNewsRequestMultiError is an error wrapping multiple validation errors
// returned by AddNewsRequest.ValidateAll() if the designated constraints
// aren't met.
type AddNewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNewsRequestMultiError) AllErrors() []error { return m }

// AddNewsRequestValidationError is the validation error returned by
// AddNewsRequest.Validate if the designated constraints aren't met.
type AddNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNewsRequestValidationError) ErrorName() string { return "AddNewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNewsRequestValidationError{}

// Validate checks the field values on UpdateNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateNewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNewsRequestMultiError, or nil if none found.
func (m *UpdateNewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := UpdateNewsRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUnit()) < 1 {
		err := UpdateNewsRequestValidationError{
			field:  "Unit",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCover()) < 1 {
		err := UpdateNewsRequestValidationError{
			field:  "Cover",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := UpdateNewsRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := UpdateNewsRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassifyId() <= 0 {
		err := UpdateNewsRequestValidationError{
			field:  "ClassifyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() <= 0 {
		err := UpdateNewsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateNewsRequestMultiError(errors)
	}

	return nil
}

// UpdateNewsRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateNewsRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateNewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNewsRequestMultiError) AllErrors() []error { return m }

// UpdateNewsRequestValidationError is the validation error returned by
// UpdateNewsRequest.Validate if the designated constraints aren't met.
type UpdateNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNewsRequestValidationError) ErrorName() string {
	return "UpdateNewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNewsRequestValidationError{}

// Validate checks the field values on DeleteNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteNewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNewsRequestMultiError, or nil if none found.
func (m *DeleteNewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteNewsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNewsRequestMultiError(errors)
	}

	return nil
}

// DeleteNewsRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteNewsRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteNewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNewsRequestMultiError) AllErrors() []error { return m }

// DeleteNewsRequestValidationError is the validation error returned by
// DeleteNewsRequest.Validate if the designated constraints aren't met.
type DeleteNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNewsRequestValidationError) ErrorName() string {
	return "DeleteNewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNewsRequestValidationError{}
