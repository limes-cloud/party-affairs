// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: party_affairs_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_PageNoticeUser_FullMethodName         = "/admin.Service/PageNoticeUser"
	Service_PageNotice_FullMethodName             = "/admin.Service/PageNotice"
	Service_GetNotice_FullMethodName              = "/admin.Service/GetNotice"
	Service_ReadNotice_FullMethodName             = "/admin.Service/ReadNotice"
	Service_AddNotice_FullMethodName              = "/admin.Service/AddNotice"
	Service_UpdateNotice_FullMethodName           = "/admin.Service/UpdateNotice"
	Service_DeleteNotice_FullMethodName           = "/admin.Service/DeleteNotice"
	Service_AllNewsClassify_FullMethodName        = "/admin.Service/AllNewsClassify"
	Service_AddNewsClassify_FullMethodName        = "/admin.Service/AddNewsClassify"
	Service_UpdateNewsClassify_FullMethodName     = "/admin.Service/UpdateNewsClassify"
	Service_DeleteNewsClassify_FullMethodName     = "/admin.Service/DeleteNewsClassify"
	Service_PageNewsContent_FullMethodName        = "/admin.Service/PageNewsContent"
	Service_GetNewsContent_FullMethodName         = "/admin.Service/GetNewsContent"
	Service_AddNewsContent_FullMethodName         = "/admin.Service/AddNewsContent"
	Service_UpdateNewsContent_FullMethodName      = "/admin.Service/UpdateNewsContent"
	Service_DeleteNewsContent_FullMethodName      = "/admin.Service/DeleteNewsContent"
	Service_PageNewsComment_FullMethodName        = "/admin.Service/PageNewsComment"
	Service_DeleteNewsComment_FullMethodName      = "/admin.Service/DeleteNewsComment"
	Service_AddNewsComment_FullMethodName         = "/admin.Service/AddNewsComment"
	Service_DeleteCurNewsComment_FullMethodName   = "/admin.Service/DeleteCurNewsComment"
	Service_AllResourceClassify_FullMethodName    = "/admin.Service/AllResourceClassify"
	Service_AddResourceClassify_FullMethodName    = "/admin.Service/AddResourceClassify"
	Service_UpdateResourceClassify_FullMethodName = "/admin.Service/UpdateResourceClassify"
	Service_DeleteResourceClassify_FullMethodName = "/admin.Service/DeleteResourceClassify"
	Service_PageResourceContent_FullMethodName    = "/admin.Service/PageResourceContent"
	Service_GetResourceContent_FullMethodName     = "/admin.Service/GetResourceContent"
	Service_AddResourceContent_FullMethodName     = "/admin.Service/AddResourceContent"
	Service_UpdateResourceContent_FullMethodName  = "/admin.Service/UpdateResourceContent"
	Service_DeleteResourceContent_FullMethodName  = "/admin.Service/DeleteResourceContent"
	Service_AllBanner_FullMethodName              = "/admin.Service/AllBanner"
	Service_AddBanner_FullMethodName              = "/admin.Service/AddBanner"
	Service_UpdateBanner_FullMethodName           = "/admin.Service/UpdateBanner"
	Service_DeleteBanner_FullMethodName           = "/admin.Service/DeleteBanner"
	Service_PageTask_FullMethodName               = "/admin.Service/PageTask"
	Service_GetTask_FullMethodName                = "/admin.Service/GetTask"
	Service_AddTask_FullMethodName                = "/admin.Service/AddTask"
	Service_UpdateTask_FullMethodName             = "/admin.Service/UpdateTask"
	Service_DeleteTask_FullMethodName             = "/admin.Service/DeleteTask"
	Service_PageTaskValue_FullMethodName          = "/admin.Service/PageTaskValue"
	Service_GetTaskValue_FullMethodName           = "/admin.Service/GetTaskValue"
	Service_GetCurTaskValue_FullMethodName        = "/admin.Service/GetCurTaskValue"
	Service_AddTaskValue_FullMethodName           = "/admin.Service/AddTaskValue"
	Service_UpdateTaskValue_FullMethodName        = "/admin.Service/UpdateTaskValue"
	Service_DeleteTaskValue_FullMethodName        = "/admin.Service/DeleteTaskValue"
	Service_PageVideoClassify_FullMethodName      = "/admin.Service/PageVideoClassify"
	Service_AddVideoClassify_FullMethodName       = "/admin.Service/AddVideoClassify"
	Service_UpdateVideoClassify_FullMethodName    = "/admin.Service/UpdateVideoClassify"
	Service_DeleteVideoClassify_FullMethodName    = "/admin.Service/DeleteVideoClassify"
	Service_PageVideoContent_FullMethodName       = "/admin.Service/PageVideoContent"
	Service_GetVideoContent_FullMethodName        = "/admin.Service/GetVideoContent"
	Service_AddVideoContent_FullMethodName        = "/admin.Service/AddVideoContent"
	Service_UpdateVideoContent_FullMethodName     = "/admin.Service/UpdateVideoContent"
	Service_DeleteVideoContent_FullMethodName     = "/admin.Service/DeleteVideoContent"
	Service_UpdateUserVideoProcess_FullMethodName = "/admin.Service/UpdateUserVideoProcess"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	PageNoticeUser(ctx context.Context, in *PageNoticeUserRequest, opts ...grpc.CallOption) (*PageNoticeUserReply, error)
	PageNotice(ctx context.Context, in *PageNoticeRequest, opts ...grpc.CallOption) (*PageNoticeReply, error)
	GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...grpc.CallOption) (*Notice, error)
	ReadNotice(ctx context.Context, in *ReadNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllNewsClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllNewsClassifyReply, error)
	AddNewsClassify(ctx context.Context, in *AddNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNewsClassify(ctx context.Context, in *UpdateNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNewsClassify(ctx context.Context, in *DeleteNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageNewsContent(ctx context.Context, in *PageNewsContentRequest, opts ...grpc.CallOption) (*PageNewsContentReply, error)
	GetNewsContent(ctx context.Context, in *GetNewsContentRequest, opts ...grpc.CallOption) (*NewsContent, error)
	AddNewsContent(ctx context.Context, in *AddNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNewsContent(ctx context.Context, in *UpdateNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNewsContent(ctx context.Context, in *DeleteNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageNewsComment(ctx context.Context, in *PageNewsCommentRequest, opts ...grpc.CallOption) (*PageNewsCommentReply, error)
	DeleteNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddNewsComment(ctx context.Context, in *AddNewsCommentRequest, opts ...grpc.CallOption) (*AddNewsCommentReply, error)
	DeleteCurNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllResourceClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllResourceClassifyReply, error)
	AddResourceClassify(ctx context.Context, in *AddResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateResourceClassify(ctx context.Context, in *UpdateResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResourceClassify(ctx context.Context, in *DeleteResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageResourceContent(ctx context.Context, in *PageResourceContentRequest, opts ...grpc.CallOption) (*PageResourceContentReply, error)
	GetResourceContent(ctx context.Context, in *GetResourceContentRequest, opts ...grpc.CallOption) (*ResourceContent, error)
	AddResourceContent(ctx context.Context, in *AddResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateResourceContent(ctx context.Context, in *UpdateResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResourceContent(ctx context.Context, in *DeleteResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllBanner(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllBannerReply, error)
	AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageTask(ctx context.Context, in *PageTaskRequest, opts ...grpc.CallOption) (*PageTaskReply, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageTaskValue(ctx context.Context, in *PageTaskValueRequest, opts ...grpc.CallOption) (*PageTaskValueReply, error)
	GetTaskValue(ctx context.Context, in *GetTaskValueRequest, opts ...grpc.CallOption) (*TaskValue, error)
	GetCurTaskValue(ctx context.Context, in *GetCurTaskValueRequest, opts ...grpc.CallOption) (*TaskValue, error)
	AddTaskValue(ctx context.Context, in *AddTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTaskValue(ctx context.Context, in *UpdateTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTaskValue(ctx context.Context, in *DeleteTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageVideoClassify(ctx context.Context, in *PageVideoClassifyRequest, opts ...grpc.CallOption) (*PageVideoClassifyReply, error)
	AddVideoClassify(ctx context.Context, in *AddVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVideoClassify(ctx context.Context, in *UpdateVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteVideoClassify(ctx context.Context, in *DeleteVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageVideoContent(ctx context.Context, in *PageVideoContentRequest, opts ...grpc.CallOption) (*PageVideoContentReply, error)
	GetVideoContent(ctx context.Context, in *GetVideoContentRequest, opts ...grpc.CallOption) (*VideoContent, error)
	AddVideoContent(ctx context.Context, in *AddVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVideoContent(ctx context.Context, in *UpdateVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteVideoContent(ctx context.Context, in *DeleteVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUserVideoProcess(ctx context.Context, in *UpdateUserVideoProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) PageNoticeUser(ctx context.Context, in *PageNoticeUserRequest, opts ...grpc.CallOption) (*PageNoticeUserReply, error) {
	out := new(PageNoticeUserReply)
	err := c.cc.Invoke(ctx, Service_PageNoticeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageNotice(ctx context.Context, in *PageNoticeRequest, opts ...grpc.CallOption) (*PageNoticeReply, error) {
	out := new(PageNoticeReply)
	err := c.cc.Invoke(ctx, Service_PageNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...grpc.CallOption) (*Notice, error) {
	out := new(Notice)
	err := c.cc.Invoke(ctx, Service_GetNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ReadNotice(ctx context.Context, in *ReadNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_ReadNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllNewsClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllNewsClassifyReply, error) {
	out := new(AllNewsClassifyReply)
	err := c.cc.Invoke(ctx, Service_AllNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddNewsClassify(ctx context.Context, in *AddNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateNewsClassify(ctx context.Context, in *UpdateNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteNewsClassify(ctx context.Context, in *DeleteNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageNewsContent(ctx context.Context, in *PageNewsContentRequest, opts ...grpc.CallOption) (*PageNewsContentReply, error) {
	out := new(PageNewsContentReply)
	err := c.cc.Invoke(ctx, Service_PageNewsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetNewsContent(ctx context.Context, in *GetNewsContentRequest, opts ...grpc.CallOption) (*NewsContent, error) {
	out := new(NewsContent)
	err := c.cc.Invoke(ctx, Service_GetNewsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddNewsContent(ctx context.Context, in *AddNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddNewsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateNewsContent(ctx context.Context, in *UpdateNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateNewsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteNewsContent(ctx context.Context, in *DeleteNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteNewsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageNewsComment(ctx context.Context, in *PageNewsCommentRequest, opts ...grpc.CallOption) (*PageNewsCommentReply, error) {
	out := new(PageNewsCommentReply)
	err := c.cc.Invoke(ctx, Service_PageNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddNewsComment(ctx context.Context, in *AddNewsCommentRequest, opts ...grpc.CallOption) (*AddNewsCommentReply, error) {
	out := new(AddNewsCommentReply)
	err := c.cc.Invoke(ctx, Service_AddNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteCurNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteCurNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllResourceClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllResourceClassifyReply, error) {
	out := new(AllResourceClassifyReply)
	err := c.cc.Invoke(ctx, Service_AllResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddResourceClassify(ctx context.Context, in *AddResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateResourceClassify(ctx context.Context, in *UpdateResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteResourceClassify(ctx context.Context, in *DeleteResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageResourceContent(ctx context.Context, in *PageResourceContentRequest, opts ...grpc.CallOption) (*PageResourceContentReply, error) {
	out := new(PageResourceContentReply)
	err := c.cc.Invoke(ctx, Service_PageResourceContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetResourceContent(ctx context.Context, in *GetResourceContentRequest, opts ...grpc.CallOption) (*ResourceContent, error) {
	out := new(ResourceContent)
	err := c.cc.Invoke(ctx, Service_GetResourceContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddResourceContent(ctx context.Context, in *AddResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddResourceContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateResourceContent(ctx context.Context, in *UpdateResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateResourceContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteResourceContent(ctx context.Context, in *DeleteResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteResourceContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllBanner(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllBannerReply, error) {
	out := new(AllBannerReply)
	err := c.cc.Invoke(ctx, Service_AllBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageTask(ctx context.Context, in *PageTaskRequest, opts ...grpc.CallOption) (*PageTaskReply, error) {
	out := new(PageTaskReply)
	err := c.cc.Invoke(ctx, Service_PageTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, Service_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageTaskValue(ctx context.Context, in *PageTaskValueRequest, opts ...grpc.CallOption) (*PageTaskValueReply, error) {
	out := new(PageTaskValueReply)
	err := c.cc.Invoke(ctx, Service_PageTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTaskValue(ctx context.Context, in *GetTaskValueRequest, opts ...grpc.CallOption) (*TaskValue, error) {
	out := new(TaskValue)
	err := c.cc.Invoke(ctx, Service_GetTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetCurTaskValue(ctx context.Context, in *GetCurTaskValueRequest, opts ...grpc.CallOption) (*TaskValue, error) {
	out := new(TaskValue)
	err := c.cc.Invoke(ctx, Service_GetCurTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddTaskValue(ctx context.Context, in *AddTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateTaskValue(ctx context.Context, in *UpdateTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteTaskValue(ctx context.Context, in *DeleteTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageVideoClassify(ctx context.Context, in *PageVideoClassifyRequest, opts ...grpc.CallOption) (*PageVideoClassifyReply, error) {
	out := new(PageVideoClassifyReply)
	err := c.cc.Invoke(ctx, Service_PageVideoClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddVideoClassify(ctx context.Context, in *AddVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddVideoClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateVideoClassify(ctx context.Context, in *UpdateVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateVideoClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteVideoClassify(ctx context.Context, in *DeleteVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteVideoClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageVideoContent(ctx context.Context, in *PageVideoContentRequest, opts ...grpc.CallOption) (*PageVideoContentReply, error) {
	out := new(PageVideoContentReply)
	err := c.cc.Invoke(ctx, Service_PageVideoContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetVideoContent(ctx context.Context, in *GetVideoContentRequest, opts ...grpc.CallOption) (*VideoContent, error) {
	out := new(VideoContent)
	err := c.cc.Invoke(ctx, Service_GetVideoContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddVideoContent(ctx context.Context, in *AddVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddVideoContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateVideoContent(ctx context.Context, in *UpdateVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateVideoContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteVideoContent(ctx context.Context, in *DeleteVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteVideoContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUserVideoProcess(ctx context.Context, in *UpdateUserVideoProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateUserVideoProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	PageNoticeUser(context.Context, *PageNoticeUserRequest) (*PageNoticeUserReply, error)
	PageNotice(context.Context, *PageNoticeRequest) (*PageNoticeReply, error)
	GetNotice(context.Context, *GetNoticeRequest) (*Notice, error)
	ReadNotice(context.Context, *ReadNoticeRequest) (*emptypb.Empty, error)
	AddNotice(context.Context, *AddNoticeRequest) (*emptypb.Empty, error)
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error)
	DeleteNotice(context.Context, *DeleteNoticeRequest) (*emptypb.Empty, error)
	AllNewsClassify(context.Context, *emptypb.Empty) (*AllNewsClassifyReply, error)
	AddNewsClassify(context.Context, *AddNewsClassifyRequest) (*emptypb.Empty, error)
	UpdateNewsClassify(context.Context, *UpdateNewsClassifyRequest) (*emptypb.Empty, error)
	DeleteNewsClassify(context.Context, *DeleteNewsClassifyRequest) (*emptypb.Empty, error)
	PageNewsContent(context.Context, *PageNewsContentRequest) (*PageNewsContentReply, error)
	GetNewsContent(context.Context, *GetNewsContentRequest) (*NewsContent, error)
	AddNewsContent(context.Context, *AddNewsContentRequest) (*emptypb.Empty, error)
	UpdateNewsContent(context.Context, *UpdateNewsContentRequest) (*emptypb.Empty, error)
	DeleteNewsContent(context.Context, *DeleteNewsContentRequest) (*emptypb.Empty, error)
	PageNewsComment(context.Context, *PageNewsCommentRequest) (*PageNewsCommentReply, error)
	DeleteNewsComment(context.Context, *DeleteNewsCommentRequest) (*emptypb.Empty, error)
	AddNewsComment(context.Context, *AddNewsCommentRequest) (*AddNewsCommentReply, error)
	DeleteCurNewsComment(context.Context, *DeleteNewsCommentRequest) (*emptypb.Empty, error)
	AllResourceClassify(context.Context, *emptypb.Empty) (*AllResourceClassifyReply, error)
	AddResourceClassify(context.Context, *AddResourceClassifyRequest) (*emptypb.Empty, error)
	UpdateResourceClassify(context.Context, *UpdateResourceClassifyRequest) (*emptypb.Empty, error)
	DeleteResourceClassify(context.Context, *DeleteResourceClassifyRequest) (*emptypb.Empty, error)
	PageResourceContent(context.Context, *PageResourceContentRequest) (*PageResourceContentReply, error)
	GetResourceContent(context.Context, *GetResourceContentRequest) (*ResourceContent, error)
	AddResourceContent(context.Context, *AddResourceContentRequest) (*emptypb.Empty, error)
	UpdateResourceContent(context.Context, *UpdateResourceContentRequest) (*emptypb.Empty, error)
	DeleteResourceContent(context.Context, *DeleteResourceContentRequest) (*emptypb.Empty, error)
	AllBanner(context.Context, *emptypb.Empty) (*AllBannerReply, error)
	AddBanner(context.Context, *AddBannerRequest) (*emptypb.Empty, error)
	UpdateBanner(context.Context, *UpdateBannerRequest) (*emptypb.Empty, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error)
	PageTask(context.Context, *PageTaskRequest) (*PageTaskReply, error)
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	AddTask(context.Context, *AddTaskRequest) (*emptypb.Empty, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error)
	PageTaskValue(context.Context, *PageTaskValueRequest) (*PageTaskValueReply, error)
	GetTaskValue(context.Context, *GetTaskValueRequest) (*TaskValue, error)
	GetCurTaskValue(context.Context, *GetCurTaskValueRequest) (*TaskValue, error)
	AddTaskValue(context.Context, *AddTaskValueRequest) (*emptypb.Empty, error)
	UpdateTaskValue(context.Context, *UpdateTaskValueRequest) (*emptypb.Empty, error)
	DeleteTaskValue(context.Context, *DeleteTaskValueRequest) (*emptypb.Empty, error)
	PageVideoClassify(context.Context, *PageVideoClassifyRequest) (*PageVideoClassifyReply, error)
	AddVideoClassify(context.Context, *AddVideoClassifyRequest) (*emptypb.Empty, error)
	UpdateVideoClassify(context.Context, *UpdateVideoClassifyRequest) (*emptypb.Empty, error)
	DeleteVideoClassify(context.Context, *DeleteVideoClassifyRequest) (*emptypb.Empty, error)
	PageVideoContent(context.Context, *PageVideoContentRequest) (*PageVideoContentReply, error)
	GetVideoContent(context.Context, *GetVideoContentRequest) (*VideoContent, error)
	AddVideoContent(context.Context, *AddVideoContentRequest) (*emptypb.Empty, error)
	UpdateVideoContent(context.Context, *UpdateVideoContentRequest) (*emptypb.Empty, error)
	DeleteVideoContent(context.Context, *DeleteVideoContentRequest) (*emptypb.Empty, error)
	UpdateUserVideoProcess(context.Context, *UpdateUserVideoProcessRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) PageNoticeUser(context.Context, *PageNoticeUserRequest) (*PageNoticeUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNoticeUser not implemented")
}
func (UnimplementedServiceServer) PageNotice(context.Context, *PageNoticeRequest) (*PageNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNotice not implemented")
}
func (UnimplementedServiceServer) GetNotice(context.Context, *GetNoticeRequest) (*Notice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotice not implemented")
}
func (UnimplementedServiceServer) ReadNotice(context.Context, *ReadNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotice not implemented")
}
func (UnimplementedServiceServer) AddNotice(context.Context, *AddNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotice not implemented")
}
func (UnimplementedServiceServer) UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotice not implemented")
}
func (UnimplementedServiceServer) DeleteNotice(context.Context, *DeleteNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotice not implemented")
}
func (UnimplementedServiceServer) AllNewsClassify(context.Context, *emptypb.Empty) (*AllNewsClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllNewsClassify not implemented")
}
func (UnimplementedServiceServer) AddNewsClassify(context.Context, *AddNewsClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewsClassify not implemented")
}
func (UnimplementedServiceServer) UpdateNewsClassify(context.Context, *UpdateNewsClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewsClassify not implemented")
}
func (UnimplementedServiceServer) DeleteNewsClassify(context.Context, *DeleteNewsClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewsClassify not implemented")
}
func (UnimplementedServiceServer) PageNewsContent(context.Context, *PageNewsContentRequest) (*PageNewsContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNewsContent not implemented")
}
func (UnimplementedServiceServer) GetNewsContent(context.Context, *GetNewsContentRequest) (*NewsContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsContent not implemented")
}
func (UnimplementedServiceServer) AddNewsContent(context.Context, *AddNewsContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewsContent not implemented")
}
func (UnimplementedServiceServer) UpdateNewsContent(context.Context, *UpdateNewsContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewsContent not implemented")
}
func (UnimplementedServiceServer) DeleteNewsContent(context.Context, *DeleteNewsContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewsContent not implemented")
}
func (UnimplementedServiceServer) PageNewsComment(context.Context, *PageNewsCommentRequest) (*PageNewsCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNewsComment not implemented")
}
func (UnimplementedServiceServer) DeleteNewsComment(context.Context, *DeleteNewsCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewsComment not implemented")
}
func (UnimplementedServiceServer) AddNewsComment(context.Context, *AddNewsCommentRequest) (*AddNewsCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewsComment not implemented")
}
func (UnimplementedServiceServer) DeleteCurNewsComment(context.Context, *DeleteNewsCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurNewsComment not implemented")
}
func (UnimplementedServiceServer) AllResourceClassify(context.Context, *emptypb.Empty) (*AllResourceClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllResourceClassify not implemented")
}
func (UnimplementedServiceServer) AddResourceClassify(context.Context, *AddResourceClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceClassify not implemented")
}
func (UnimplementedServiceServer) UpdateResourceClassify(context.Context, *UpdateResourceClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceClassify not implemented")
}
func (UnimplementedServiceServer) DeleteResourceClassify(context.Context, *DeleteResourceClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceClassify not implemented")
}
func (UnimplementedServiceServer) PageResourceContent(context.Context, *PageResourceContentRequest) (*PageResourceContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageResourceContent not implemented")
}
func (UnimplementedServiceServer) GetResourceContent(context.Context, *GetResourceContentRequest) (*ResourceContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceContent not implemented")
}
func (UnimplementedServiceServer) AddResourceContent(context.Context, *AddResourceContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceContent not implemented")
}
func (UnimplementedServiceServer) UpdateResourceContent(context.Context, *UpdateResourceContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceContent not implemented")
}
func (UnimplementedServiceServer) DeleteResourceContent(context.Context, *DeleteResourceContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceContent not implemented")
}
func (UnimplementedServiceServer) AllBanner(context.Context, *emptypb.Empty) (*AllBannerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBanner not implemented")
}
func (UnimplementedServiceServer) AddBanner(context.Context, *AddBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedServiceServer) UpdateBanner(context.Context, *UpdateBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedServiceServer) DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedServiceServer) PageTask(context.Context, *PageTaskRequest) (*PageTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageTask not implemented")
}
func (UnimplementedServiceServer) GetTask(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedServiceServer) AddTask(context.Context, *AddTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedServiceServer) PageTaskValue(context.Context, *PageTaskValueRequest) (*PageTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageTaskValue not implemented")
}
func (UnimplementedServiceServer) GetTaskValue(context.Context, *GetTaskValueRequest) (*TaskValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskValue not implemented")
}
func (UnimplementedServiceServer) GetCurTaskValue(context.Context, *GetCurTaskValueRequest) (*TaskValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurTaskValue not implemented")
}
func (UnimplementedServiceServer) AddTaskValue(context.Context, *AddTaskValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskValue not implemented")
}
func (UnimplementedServiceServer) UpdateTaskValue(context.Context, *UpdateTaskValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskValue not implemented")
}
func (UnimplementedServiceServer) DeleteTaskValue(context.Context, *DeleteTaskValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskValue not implemented")
}
func (UnimplementedServiceServer) PageVideoClassify(context.Context, *PageVideoClassifyRequest) (*PageVideoClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageVideoClassify not implemented")
}
func (UnimplementedServiceServer) AddVideoClassify(context.Context, *AddVideoClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoClassify not implemented")
}
func (UnimplementedServiceServer) UpdateVideoClassify(context.Context, *UpdateVideoClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoClassify not implemented")
}
func (UnimplementedServiceServer) DeleteVideoClassify(context.Context, *DeleteVideoClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideoClassify not implemented")
}
func (UnimplementedServiceServer) PageVideoContent(context.Context, *PageVideoContentRequest) (*PageVideoContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageVideoContent not implemented")
}
func (UnimplementedServiceServer) GetVideoContent(context.Context, *GetVideoContentRequest) (*VideoContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoContent not implemented")
}
func (UnimplementedServiceServer) AddVideoContent(context.Context, *AddVideoContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoContent not implemented")
}
func (UnimplementedServiceServer) UpdateVideoContent(context.Context, *UpdateVideoContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoContent not implemented")
}
func (UnimplementedServiceServer) DeleteVideoContent(context.Context, *DeleteVideoContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideoContent not implemented")
}
func (UnimplementedServiceServer) UpdateUserVideoProcess(context.Context, *UpdateUserVideoProcessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserVideoProcess not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_PageNoticeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNoticeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageNoticeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageNoticeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageNoticeUser(ctx, req.(*PageNoticeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageNotice(ctx, req.(*PageNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetNotice(ctx, req.(*GetNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ReadNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ReadNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ReadNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ReadNotice(ctx, req.(*ReadNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddNotice(ctx, req.(*AddNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateNotice(ctx, req.(*UpdateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteNotice(ctx, req.(*DeleteNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllNewsClassify(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewsClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddNewsClassify(ctx, req.(*AddNewsClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateNewsClassify(ctx, req.(*UpdateNewsClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteNewsClassify(ctx, req.(*DeleteNewsClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNewsContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageNewsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageNewsContent(ctx, req.(*PageNewsContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetNewsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetNewsContent(ctx, req.(*GetNewsContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewsContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddNewsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddNewsContent(ctx, req.(*AddNewsContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateNewsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateNewsContent(ctx, req.(*UpdateNewsContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteNewsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteNewsContent(ctx, req.(*DeleteNewsContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageNewsComment(ctx, req.(*PageNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteNewsComment(ctx, req.(*DeleteNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddNewsComment(ctx, req.(*AddNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteCurNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteCurNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteCurNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteCurNewsComment(ctx, req.(*DeleteNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllResourceClassify(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddResourceClassify(ctx, req.(*AddResourceClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateResourceClassify(ctx, req.(*UpdateResourceClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteResourceClassify(ctx, req.(*DeleteResourceClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageResourceContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageResourceContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageResourceContent(ctx, req.(*PageResourceContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetResourceContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetResourceContent(ctx, req.(*GetResourceContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddResourceContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddResourceContent(ctx, req.(*AddResourceContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateResourceContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateResourceContent(ctx, req.(*UpdateResourceContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteResourceContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteResourceContent(ctx, req.(*DeleteResourceContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllBanner(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateBanner(ctx, req.(*UpdateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageTask(ctx, req.(*PageTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageTaskValue(ctx, req.(*PageTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTaskValue(ctx, req.(*GetTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetCurTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetCurTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetCurTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetCurTaskValue(ctx, req.(*GetCurTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddTaskValue(ctx, req.(*AddTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateTaskValue(ctx, req.(*UpdateTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteTaskValue(ctx, req.(*DeleteTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageVideoClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageVideoClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageVideoClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageVideoClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageVideoClassify(ctx, req.(*PageVideoClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddVideoClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddVideoClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddVideoClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddVideoClassify(ctx, req.(*AddVideoClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateVideoClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateVideoClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateVideoClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateVideoClassify(ctx, req.(*UpdateVideoClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteVideoClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteVideoClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteVideoClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteVideoClassify(ctx, req.(*DeleteVideoClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageVideoContent(ctx, req.(*PageVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetVideoContent(ctx, req.(*GetVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddVideoContent(ctx, req.(*AddVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateVideoContent(ctx, req.(*UpdateVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteVideoContent(ctx, req.(*DeleteVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateUserVideoProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserVideoProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateUserVideoProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateUserVideoProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateUserVideoProcess(ctx, req.(*UpdateUserVideoProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageNoticeUser",
			Handler:    _Service_PageNoticeUser_Handler,
		},
		{
			MethodName: "PageNotice",
			Handler:    _Service_PageNotice_Handler,
		},
		{
			MethodName: "GetNotice",
			Handler:    _Service_GetNotice_Handler,
		},
		{
			MethodName: "ReadNotice",
			Handler:    _Service_ReadNotice_Handler,
		},
		{
			MethodName: "AddNotice",
			Handler:    _Service_AddNotice_Handler,
		},
		{
			MethodName: "UpdateNotice",
			Handler:    _Service_UpdateNotice_Handler,
		},
		{
			MethodName: "DeleteNotice",
			Handler:    _Service_DeleteNotice_Handler,
		},
		{
			MethodName: "AllNewsClassify",
			Handler:    _Service_AllNewsClassify_Handler,
		},
		{
			MethodName: "AddNewsClassify",
			Handler:    _Service_AddNewsClassify_Handler,
		},
		{
			MethodName: "UpdateNewsClassify",
			Handler:    _Service_UpdateNewsClassify_Handler,
		},
		{
			MethodName: "DeleteNewsClassify",
			Handler:    _Service_DeleteNewsClassify_Handler,
		},
		{
			MethodName: "PageNewsContent",
			Handler:    _Service_PageNewsContent_Handler,
		},
		{
			MethodName: "GetNewsContent",
			Handler:    _Service_GetNewsContent_Handler,
		},
		{
			MethodName: "AddNewsContent",
			Handler:    _Service_AddNewsContent_Handler,
		},
		{
			MethodName: "UpdateNewsContent",
			Handler:    _Service_UpdateNewsContent_Handler,
		},
		{
			MethodName: "DeleteNewsContent",
			Handler:    _Service_DeleteNewsContent_Handler,
		},
		{
			MethodName: "PageNewsComment",
			Handler:    _Service_PageNewsComment_Handler,
		},
		{
			MethodName: "DeleteNewsComment",
			Handler:    _Service_DeleteNewsComment_Handler,
		},
		{
			MethodName: "AddNewsComment",
			Handler:    _Service_AddNewsComment_Handler,
		},
		{
			MethodName: "DeleteCurNewsComment",
			Handler:    _Service_DeleteCurNewsComment_Handler,
		},
		{
			MethodName: "AllResourceClassify",
			Handler:    _Service_AllResourceClassify_Handler,
		},
		{
			MethodName: "AddResourceClassify",
			Handler:    _Service_AddResourceClassify_Handler,
		},
		{
			MethodName: "UpdateResourceClassify",
			Handler:    _Service_UpdateResourceClassify_Handler,
		},
		{
			MethodName: "DeleteResourceClassify",
			Handler:    _Service_DeleteResourceClassify_Handler,
		},
		{
			MethodName: "PageResourceContent",
			Handler:    _Service_PageResourceContent_Handler,
		},
		{
			MethodName: "GetResourceContent",
			Handler:    _Service_GetResourceContent_Handler,
		},
		{
			MethodName: "AddResourceContent",
			Handler:    _Service_AddResourceContent_Handler,
		},
		{
			MethodName: "UpdateResourceContent",
			Handler:    _Service_UpdateResourceContent_Handler,
		},
		{
			MethodName: "DeleteResourceContent",
			Handler:    _Service_DeleteResourceContent_Handler,
		},
		{
			MethodName: "AllBanner",
			Handler:    _Service_AllBanner_Handler,
		},
		{
			MethodName: "AddBanner",
			Handler:    _Service_AddBanner_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _Service_UpdateBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _Service_DeleteBanner_Handler,
		},
		{
			MethodName: "PageTask",
			Handler:    _Service_PageTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Service_GetTask_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _Service_AddTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Service_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Service_DeleteTask_Handler,
		},
		{
			MethodName: "PageTaskValue",
			Handler:    _Service_PageTaskValue_Handler,
		},
		{
			MethodName: "GetTaskValue",
			Handler:    _Service_GetTaskValue_Handler,
		},
		{
			MethodName: "GetCurTaskValue",
			Handler:    _Service_GetCurTaskValue_Handler,
		},
		{
			MethodName: "AddTaskValue",
			Handler:    _Service_AddTaskValue_Handler,
		},
		{
			MethodName: "UpdateTaskValue",
			Handler:    _Service_UpdateTaskValue_Handler,
		},
		{
			MethodName: "DeleteTaskValue",
			Handler:    _Service_DeleteTaskValue_Handler,
		},
		{
			MethodName: "PageVideoClassify",
			Handler:    _Service_PageVideoClassify_Handler,
		},
		{
			MethodName: "AddVideoClassify",
			Handler:    _Service_AddVideoClassify_Handler,
		},
		{
			MethodName: "UpdateVideoClassify",
			Handler:    _Service_UpdateVideoClassify_Handler,
		},
		{
			MethodName: "DeleteVideoClassify",
			Handler:    _Service_DeleteVideoClassify_Handler,
		},
		{
			MethodName: "PageVideoContent",
			Handler:    _Service_PageVideoContent_Handler,
		},
		{
			MethodName: "GetVideoContent",
			Handler:    _Service_GetVideoContent_Handler,
		},
		{
			MethodName: "AddVideoContent",
			Handler:    _Service_AddVideoContent_Handler,
		},
		{
			MethodName: "UpdateVideoContent",
			Handler:    _Service_UpdateVideoContent_Handler,
		},
		{
			MethodName: "DeleteVideoContent",
			Handler:    _Service_DeleteVideoContent_Handler,
		},
		{
			MethodName: "UpdateUserVideoProcess",
			Handler:    _Service_UpdateUserVideoProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party_affairs_service.proto",
}
