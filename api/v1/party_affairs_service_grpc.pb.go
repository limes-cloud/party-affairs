// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: party_affairs_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_Login_FullMethodName                  = "/admin.Service/Login"
	Service_RefreshToken_FullMethodName           = "/admin.Service/RefreshToken"
	Service_SendBindEmail_FullMethodName          = "/admin.Service/SendBindEmail"
	Service_Bind_FullMethodName                   = "/admin.Service/Bind"
	Service_PageUser_FullMethodName               = "/admin.Service/PageUser"
	Service_CurrentUser_FullMethodName            = "/admin.Service/CurrentUser"
	Service_ChangeUserStatus_FullMethodName       = "/admin.Service/ChangeUserStatus"
	Service_AddUser_FullMethodName                = "/admin.Service/AddUser"
	Service_UpdateUser_FullMethodName             = "/admin.Service/UpdateUser"
	Service_DeleteUser_FullMethodName             = "/admin.Service/DeleteUser"
	Service_AllNewsClassify_FullMethodName        = "/admin.Service/AllNewsClassify"
	Service_AddNewsClassify_FullMethodName        = "/admin.Service/AddNewsClassify"
	Service_UpdateNewsClassify_FullMethodName     = "/admin.Service/UpdateNewsClassify"
	Service_DeleteNewsClassify_FullMethodName     = "/admin.Service/DeleteNewsClassify"
	Service_PageNews_FullMethodName               = "/admin.Service/PageNews"
	Service_GetNews_FullMethodName                = "/admin.Service/GetNews"
	Service_AddNews_FullMethodName                = "/admin.Service/AddNews"
	Service_UpdateNews_FullMethodName             = "/admin.Service/UpdateNews"
	Service_DeleteNews_FullMethodName             = "/admin.Service/DeleteNews"
	Service_AllResourceClassify_FullMethodName    = "/admin.Service/AllResourceClassify"
	Service_AddResourceClassify_FullMethodName    = "/admin.Service/AddResourceClassify"
	Service_UpdateResourceClassify_FullMethodName = "/admin.Service/UpdateResourceClassify"
	Service_DeleteResourceClassify_FullMethodName = "/admin.Service/DeleteResourceClassify"
	Service_PageResource_FullMethodName           = "/admin.Service/PageResource"
	Service_GetResource_FullMethodName            = "/admin.Service/GetResource"
	Service_AddResource_FullMethodName            = "/admin.Service/AddResource"
	Service_UpdateResource_FullMethodName         = "/admin.Service/UpdateResource"
	Service_DeleteResource_FullMethodName         = "/admin.Service/DeleteResource"
	Service_AllBanner_FullMethodName              = "/admin.Service/AllBanner"
	Service_AddBanner_FullMethodName              = "/admin.Service/AddBanner"
	Service_UpdateBanner_FullMethodName           = "/admin.Service/UpdateBanner"
	Service_DeleteBanner_FullMethodName           = "/admin.Service/DeleteBanner"
	Service_PageTask_FullMethodName               = "/admin.Service/PageTask"
	Service_GetTask_FullMethodName                = "/admin.Service/GetTask"
	Service_AddTask_FullMethodName                = "/admin.Service/AddTask"
	Service_UpdateTask_FullMethodName             = "/admin.Service/UpdateTask"
	Service_DeleteTask_FullMethodName             = "/admin.Service/DeleteTask"
	Service_PageTaskValue_FullMethodName          = "/admin.Service/PageTaskValue"
	Service_GetTaskValue_FullMethodName           = "/admin.Service/GetTaskValue"
	Service_AddTaskValue_FullMethodName           = "/admin.Service/AddTaskValue"
	Service_UpdateTaskValue_FullMethodName        = "/admin.Service/UpdateTaskValue"
	Service_DeleteTaskValue_FullMethodName        = "/admin.Service/DeleteTaskValue"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	RefreshToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RefreshTokenReply, error)
	SendBindEmail(ctx context.Context, in *SendBindEmailRequest, opts ...grpc.CallOption) (*SendBindEmailReply, error)
	Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindReply, error)
	PageUser(ctx context.Context, in *PageUserRequest, opts ...grpc.CallOption) (*PageUserReply, error)
	CurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error)
	ChangeUserStatus(ctx context.Context, in *ChangeUserStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllNewsClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllNewsClassifyReply, error)
	AddNewsClassify(ctx context.Context, in *AddNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNewsClassify(ctx context.Context, in *UpdateNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNewsClassify(ctx context.Context, in *DeleteNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageNews(ctx context.Context, in *PageNewsRequest, opts ...grpc.CallOption) (*PageNewsReply, error)
	GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsReply, error)
	AddNews(ctx context.Context, in *AddNewsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNews(ctx context.Context, in *UpdateNewsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNews(ctx context.Context, in *DeleteNewsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllResourceClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllResourceClassifyReply, error)
	AddResourceClassify(ctx context.Context, in *AddResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateResourceClassify(ctx context.Context, in *UpdateResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResourceClassify(ctx context.Context, in *DeleteResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageResource(ctx context.Context, in *PageResourceRequest, opts ...grpc.CallOption) (*PageResourceReply, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceReply, error)
	AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllBanner(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllBannerReply, error)
	AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageTask(ctx context.Context, in *PageTaskRequest, opts ...grpc.CallOption) (*PageTaskReply, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskReply, error)
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageTaskValue(ctx context.Context, in *PageTaskValueRequest, opts ...grpc.CallOption) (*PageTaskValueReply, error)
	GetTaskValue(ctx context.Context, in *GetTaskValueRequest, opts ...grpc.CallOption) (*GetTaskValueReply, error)
	AddTaskValue(ctx context.Context, in *AddTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTaskValue(ctx context.Context, in *UpdateTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTaskValue(ctx context.Context, in *DeleteTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Service_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RefreshToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RefreshTokenReply, error) {
	out := new(RefreshTokenReply)
	err := c.cc.Invoke(ctx, Service_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SendBindEmail(ctx context.Context, in *SendBindEmailRequest, opts ...grpc.CallOption) (*SendBindEmailReply, error) {
	out := new(SendBindEmailReply)
	err := c.cc.Invoke(ctx, Service_SendBindEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindReply, error) {
	out := new(BindReply)
	err := c.cc.Invoke(ctx, Service_Bind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageUser(ctx context.Context, in *PageUserRequest, opts ...grpc.CallOption) (*PageUserReply, error) {
	out := new(PageUserReply)
	err := c.cc.Invoke(ctx, Service_PageUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Service_CurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ChangeUserStatus(ctx context.Context, in *ChangeUserStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_ChangeUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllNewsClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllNewsClassifyReply, error) {
	out := new(AllNewsClassifyReply)
	err := c.cc.Invoke(ctx, Service_AllNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddNewsClassify(ctx context.Context, in *AddNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateNewsClassify(ctx context.Context, in *UpdateNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteNewsClassify(ctx context.Context, in *DeleteNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageNews(ctx context.Context, in *PageNewsRequest, opts ...grpc.CallOption) (*PageNewsReply, error) {
	out := new(PageNewsReply)
	err := c.cc.Invoke(ctx, Service_PageNews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsReply, error) {
	out := new(GetNewsReply)
	err := c.cc.Invoke(ctx, Service_GetNews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddNews(ctx context.Context, in *AddNewsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddNews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateNews(ctx context.Context, in *UpdateNewsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateNews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteNews(ctx context.Context, in *DeleteNewsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteNews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllResourceClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllResourceClassifyReply, error) {
	out := new(AllResourceClassifyReply)
	err := c.cc.Invoke(ctx, Service_AllResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddResourceClassify(ctx context.Context, in *AddResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateResourceClassify(ctx context.Context, in *UpdateResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteResourceClassify(ctx context.Context, in *DeleteResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageResource(ctx context.Context, in *PageResourceRequest, opts ...grpc.CallOption) (*PageResourceReply, error) {
	out := new(PageResourceReply)
	err := c.cc.Invoke(ctx, Service_PageResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceReply, error) {
	out := new(GetResourceReply)
	err := c.cc.Invoke(ctx, Service_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllBanner(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllBannerReply, error) {
	out := new(AllBannerReply)
	err := c.cc.Invoke(ctx, Service_AllBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageTask(ctx context.Context, in *PageTaskRequest, opts ...grpc.CallOption) (*PageTaskReply, error) {
	out := new(PageTaskReply)
	err := c.cc.Invoke(ctx, Service_PageTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskReply, error) {
	out := new(GetTaskReply)
	err := c.cc.Invoke(ctx, Service_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageTaskValue(ctx context.Context, in *PageTaskValueRequest, opts ...grpc.CallOption) (*PageTaskValueReply, error) {
	out := new(PageTaskValueReply)
	err := c.cc.Invoke(ctx, Service_PageTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTaskValue(ctx context.Context, in *GetTaskValueRequest, opts ...grpc.CallOption) (*GetTaskValueReply, error) {
	out := new(GetTaskValueReply)
	err := c.cc.Invoke(ctx, Service_GetTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddTaskValue(ctx context.Context, in *AddTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateTaskValue(ctx context.Context, in *UpdateTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteTaskValue(ctx context.Context, in *DeleteTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	RefreshToken(context.Context, *emptypb.Empty) (*RefreshTokenReply, error)
	SendBindEmail(context.Context, *SendBindEmailRequest) (*SendBindEmailReply, error)
	Bind(context.Context, *BindRequest) (*BindReply, error)
	PageUser(context.Context, *PageUserRequest) (*PageUserReply, error)
	CurrentUser(context.Context, *emptypb.Empty) (*User, error)
	ChangeUserStatus(context.Context, *ChangeUserStatusRequest) (*emptypb.Empty, error)
	AddUser(context.Context, *AddUserRequest) (*emptypb.Empty, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	AllNewsClassify(context.Context, *emptypb.Empty) (*AllNewsClassifyReply, error)
	AddNewsClassify(context.Context, *AddNewsClassifyRequest) (*emptypb.Empty, error)
	UpdateNewsClassify(context.Context, *UpdateNewsClassifyRequest) (*emptypb.Empty, error)
	DeleteNewsClassify(context.Context, *DeleteNewsClassifyRequest) (*emptypb.Empty, error)
	PageNews(context.Context, *PageNewsRequest) (*PageNewsReply, error)
	GetNews(context.Context, *GetNewsRequest) (*GetNewsReply, error)
	AddNews(context.Context, *AddNewsRequest) (*emptypb.Empty, error)
	UpdateNews(context.Context, *UpdateNewsRequest) (*emptypb.Empty, error)
	DeleteNews(context.Context, *DeleteNewsRequest) (*emptypb.Empty, error)
	AllResourceClassify(context.Context, *emptypb.Empty) (*AllResourceClassifyReply, error)
	AddResourceClassify(context.Context, *AddResourceClassifyRequest) (*emptypb.Empty, error)
	UpdateResourceClassify(context.Context, *UpdateResourceClassifyRequest) (*emptypb.Empty, error)
	DeleteResourceClassify(context.Context, *DeleteResourceClassifyRequest) (*emptypb.Empty, error)
	PageResource(context.Context, *PageResourceRequest) (*PageResourceReply, error)
	GetResource(context.Context, *GetResourceRequest) (*GetResourceReply, error)
	AddResource(context.Context, *AddResourceRequest) (*emptypb.Empty, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*emptypb.Empty, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error)
	AllBanner(context.Context, *emptypb.Empty) (*AllBannerReply, error)
	AddBanner(context.Context, *AddBannerRequest) (*emptypb.Empty, error)
	UpdateBanner(context.Context, *UpdateBannerRequest) (*emptypb.Empty, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error)
	PageTask(context.Context, *PageTaskRequest) (*PageTaskReply, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error)
	AddTask(context.Context, *AddTaskRequest) (*emptypb.Empty, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error)
	PageTaskValue(context.Context, *PageTaskValueRequest) (*PageTaskValueReply, error)
	GetTaskValue(context.Context, *GetTaskValueRequest) (*GetTaskValueReply, error)
	AddTaskValue(context.Context, *AddTaskValueRequest) (*emptypb.Empty, error)
	UpdateTaskValue(context.Context, *UpdateTaskValueRequest) (*emptypb.Empty, error)
	DeleteTaskValue(context.Context, *DeleteTaskValueRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedServiceServer) RefreshToken(context.Context, *emptypb.Empty) (*RefreshTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedServiceServer) SendBindEmail(context.Context, *SendBindEmailRequest) (*SendBindEmailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBindEmail not implemented")
}
func (UnimplementedServiceServer) Bind(context.Context, *BindRequest) (*BindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedServiceServer) PageUser(context.Context, *PageUserRequest) (*PageUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageUser not implemented")
}
func (UnimplementedServiceServer) CurrentUser(context.Context, *emptypb.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentUser not implemented")
}
func (UnimplementedServiceServer) ChangeUserStatus(context.Context, *ChangeUserStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserStatus not implemented")
}
func (UnimplementedServiceServer) AddUser(context.Context, *AddUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedServiceServer) AllNewsClassify(context.Context, *emptypb.Empty) (*AllNewsClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllNewsClassify not implemented")
}
func (UnimplementedServiceServer) AddNewsClassify(context.Context, *AddNewsClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewsClassify not implemented")
}
func (UnimplementedServiceServer) UpdateNewsClassify(context.Context, *UpdateNewsClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewsClassify not implemented")
}
func (UnimplementedServiceServer) DeleteNewsClassify(context.Context, *DeleteNewsClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewsClassify not implemented")
}
func (UnimplementedServiceServer) PageNews(context.Context, *PageNewsRequest) (*PageNewsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNews not implemented")
}
func (UnimplementedServiceServer) GetNews(context.Context, *GetNewsRequest) (*GetNewsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNews not implemented")
}
func (UnimplementedServiceServer) AddNews(context.Context, *AddNewsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNews not implemented")
}
func (UnimplementedServiceServer) UpdateNews(context.Context, *UpdateNewsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNews not implemented")
}
func (UnimplementedServiceServer) DeleteNews(context.Context, *DeleteNewsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNews not implemented")
}
func (UnimplementedServiceServer) AllResourceClassify(context.Context, *emptypb.Empty) (*AllResourceClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllResourceClassify not implemented")
}
func (UnimplementedServiceServer) AddResourceClassify(context.Context, *AddResourceClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceClassify not implemented")
}
func (UnimplementedServiceServer) UpdateResourceClassify(context.Context, *UpdateResourceClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceClassify not implemented")
}
func (UnimplementedServiceServer) DeleteResourceClassify(context.Context, *DeleteResourceClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceClassify not implemented")
}
func (UnimplementedServiceServer) PageResource(context.Context, *PageResourceRequest) (*PageResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageResource not implemented")
}
func (UnimplementedServiceServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedServiceServer) AddResource(context.Context, *AddResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedServiceServer) AllBanner(context.Context, *emptypb.Empty) (*AllBannerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBanner not implemented")
}
func (UnimplementedServiceServer) AddBanner(context.Context, *AddBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedServiceServer) UpdateBanner(context.Context, *UpdateBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedServiceServer) DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedServiceServer) PageTask(context.Context, *PageTaskRequest) (*PageTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageTask not implemented")
}
func (UnimplementedServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedServiceServer) AddTask(context.Context, *AddTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedServiceServer) PageTaskValue(context.Context, *PageTaskValueRequest) (*PageTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageTaskValue not implemented")
}
func (UnimplementedServiceServer) GetTaskValue(context.Context, *GetTaskValueRequest) (*GetTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskValue not implemented")
}
func (UnimplementedServiceServer) AddTaskValue(context.Context, *AddTaskValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskValue not implemented")
}
func (UnimplementedServiceServer) UpdateTaskValue(context.Context, *UpdateTaskValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskValue not implemented")
}
func (UnimplementedServiceServer) DeleteTaskValue(context.Context, *DeleteTaskValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskValue not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RefreshToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SendBindEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBindEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SendBindEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_SendBindEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SendBindEmail(ctx, req.(*SendBindEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Bind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Bind(ctx, req.(*BindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageUser(ctx, req.(*PageUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CurrentUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ChangeUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ChangeUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ChangeUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ChangeUserStatus(ctx, req.(*ChangeUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllNewsClassify(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewsClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddNewsClassify(ctx, req.(*AddNewsClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateNewsClassify(ctx, req.(*UpdateNewsClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteNewsClassify(ctx, req.(*DeleteNewsClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageNews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageNews(ctx, req.(*PageNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetNews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetNews(ctx, req.(*GetNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddNews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddNews(ctx, req.(*AddNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateNews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateNews(ctx, req.(*UpdateNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteNews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteNews(ctx, req.(*DeleteNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllResourceClassify(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddResourceClassify(ctx, req.(*AddResourceClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateResourceClassify(ctx, req.(*UpdateResourceClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteResourceClassify(ctx, req.(*DeleteResourceClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageResource(ctx, req.(*PageResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddResource(ctx, req.(*AddResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllBanner(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateBanner(ctx, req.(*UpdateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageTask(ctx, req.(*PageTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageTaskValue(ctx, req.(*PageTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTaskValue(ctx, req.(*GetTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddTaskValue(ctx, req.(*AddTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateTaskValue(ctx, req.(*UpdateTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteTaskValue(ctx, req.(*DeleteTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Service_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Service_RefreshToken_Handler,
		},
		{
			MethodName: "SendBindEmail",
			Handler:    _Service_SendBindEmail_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _Service_Bind_Handler,
		},
		{
			MethodName: "PageUser",
			Handler:    _Service_PageUser_Handler,
		},
		{
			MethodName: "CurrentUser",
			Handler:    _Service_CurrentUser_Handler,
		},
		{
			MethodName: "ChangeUserStatus",
			Handler:    _Service_ChangeUserStatus_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Service_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Service_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Service_DeleteUser_Handler,
		},
		{
			MethodName: "AllNewsClassify",
			Handler:    _Service_AllNewsClassify_Handler,
		},
		{
			MethodName: "AddNewsClassify",
			Handler:    _Service_AddNewsClassify_Handler,
		},
		{
			MethodName: "UpdateNewsClassify",
			Handler:    _Service_UpdateNewsClassify_Handler,
		},
		{
			MethodName: "DeleteNewsClassify",
			Handler:    _Service_DeleteNewsClassify_Handler,
		},
		{
			MethodName: "PageNews",
			Handler:    _Service_PageNews_Handler,
		},
		{
			MethodName: "GetNews",
			Handler:    _Service_GetNews_Handler,
		},
		{
			MethodName: "AddNews",
			Handler:    _Service_AddNews_Handler,
		},
		{
			MethodName: "UpdateNews",
			Handler:    _Service_UpdateNews_Handler,
		},
		{
			MethodName: "DeleteNews",
			Handler:    _Service_DeleteNews_Handler,
		},
		{
			MethodName: "AllResourceClassify",
			Handler:    _Service_AllResourceClassify_Handler,
		},
		{
			MethodName: "AddResourceClassify",
			Handler:    _Service_AddResourceClassify_Handler,
		},
		{
			MethodName: "UpdateResourceClassify",
			Handler:    _Service_UpdateResourceClassify_Handler,
		},
		{
			MethodName: "DeleteResourceClassify",
			Handler:    _Service_DeleteResourceClassify_Handler,
		},
		{
			MethodName: "PageResource",
			Handler:    _Service_PageResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _Service_GetResource_Handler,
		},
		{
			MethodName: "AddResource",
			Handler:    _Service_AddResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _Service_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _Service_DeleteResource_Handler,
		},
		{
			MethodName: "AllBanner",
			Handler:    _Service_AllBanner_Handler,
		},
		{
			MethodName: "AddBanner",
			Handler:    _Service_AddBanner_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _Service_UpdateBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _Service_DeleteBanner_Handler,
		},
		{
			MethodName: "PageTask",
			Handler:    _Service_PageTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Service_GetTask_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _Service_AddTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Service_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Service_DeleteTask_Handler,
		},
		{
			MethodName: "PageTaskValue",
			Handler:    _Service_PageTaskValue_Handler,
		},
		{
			MethodName: "GetTaskValue",
			Handler:    _Service_GetTaskValue_Handler,
		},
		{
			MethodName: "AddTaskValue",
			Handler:    _Service_AddTaskValue_Handler,
		},
		{
			MethodName: "UpdateTaskValue",
			Handler:    _Service_UpdateTaskValue_Handler,
		},
		{
			MethodName: "DeleteTaskValue",
			Handler:    _Service_DeleteTaskValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party_affairs_service.proto",
}
