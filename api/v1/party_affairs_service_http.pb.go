// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: party_affairs_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddBanner = "/admin.Service/AddBanner"
const OperationServiceAddNews = "/admin.Service/AddNews"
const OperationServiceAddNewsClassify = "/admin.Service/AddNewsClassify"
const OperationServiceAddResourceClassify = "/admin.Service/AddResourceClassify"
const OperationServiceAddResourceContent = "/admin.Service/AddResourceContent"
const OperationServiceAddTask = "/admin.Service/AddTask"
const OperationServiceAddTaskValue = "/admin.Service/AddTaskValue"
const OperationServiceAllBanner = "/admin.Service/AllBanner"
const OperationServiceAllNewsClassify = "/admin.Service/AllNewsClassify"
const OperationServiceAllResourceClassify = "/admin.Service/AllResourceClassify"
const OperationServiceDeleteBanner = "/admin.Service/DeleteBanner"
const OperationServiceDeleteNews = "/admin.Service/DeleteNews"
const OperationServiceDeleteNewsClassify = "/admin.Service/DeleteNewsClassify"
const OperationServiceDeleteResourceClassify = "/admin.Service/DeleteResourceClassify"
const OperationServiceDeleteResourceContent = "/admin.Service/DeleteResourceContent"
const OperationServiceDeleteTask = "/admin.Service/DeleteTask"
const OperationServiceDeleteTaskValue = "/admin.Service/DeleteTaskValue"
const OperationServiceGetNewsContent = "/admin.Service/GetNewsContent"
const OperationServiceGetResourceContent = "/admin.Service/GetResourceContent"
const OperationServiceGetTask = "/admin.Service/GetTask"
const OperationServiceGetTaskValue = "/admin.Service/GetTaskValue"
const OperationServicePageNewsContent = "/admin.Service/PageNewsContent"
const OperationServicePageResourceContent = "/admin.Service/PageResourceContent"
const OperationServicePageTask = "/admin.Service/PageTask"
const OperationServicePageTaskValue = "/admin.Service/PageTaskValue"
const OperationServiceUpdateBanner = "/admin.Service/UpdateBanner"
const OperationServiceUpdateNews = "/admin.Service/UpdateNews"
const OperationServiceUpdateNewsClassify = "/admin.Service/UpdateNewsClassify"
const OperationServiceUpdateResourceClassify = "/admin.Service/UpdateResourceClassify"
const OperationServiceUpdateResourceContent = "/admin.Service/UpdateResourceContent"
const OperationServiceUpdateTask = "/admin.Service/UpdateTask"
const OperationServiceUpdateTaskValue = "/admin.Service/UpdateTaskValue"

type ServiceHTTPServer interface {
	AddBanner(context.Context, *AddBannerRequest) (*emptypb.Empty, error)
	AddNews(context.Context, *AddNewsRequest) (*emptypb.Empty, error)
	AddNewsClassify(context.Context, *AddNewsClassifyRequest) (*emptypb.Empty, error)
	AddResourceClassify(context.Context, *AddResourceClassifyRequest) (*emptypb.Empty, error)
	AddResourceContent(context.Context, *AddResourceRequest) (*emptypb.Empty, error)
	AddTask(context.Context, *AddTaskRequest) (*emptypb.Empty, error)
	AddTaskValue(context.Context, *AddTaskValueRequest) (*emptypb.Empty, error)
	AllBanner(context.Context, *emptypb.Empty) (*AllBannerReply, error)
	AllNewsClassify(context.Context, *emptypb.Empty) (*AllNewsClassifyReply, error)
	AllResourceClassify(context.Context, *emptypb.Empty) (*AllResourceClassifyReply, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error)
	DeleteNews(context.Context, *DeleteNewsRequest) (*emptypb.Empty, error)
	DeleteNewsClassify(context.Context, *DeleteNewsClassifyRequest) (*emptypb.Empty, error)
	DeleteResourceClassify(context.Context, *DeleteResourceClassifyRequest) (*emptypb.Empty, error)
	DeleteResourceContent(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error)
	DeleteTaskValue(context.Context, *DeleteTaskValueRequest) (*emptypb.Empty, error)
	GetNewsContent(context.Context, *GetNewsRequest) (*News, error)
	GetResourceContent(context.Context, *GetResourceRequest) (*Resource, error)
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	GetTaskValue(context.Context, *GetTaskValueRequest) (*TaskValue, error)
	PageNewsContent(context.Context, *PageNewsRequest) (*PageNewsReply, error)
	PageResourceContent(context.Context, *PageResourceRequest) (*PageResourceReply, error)
	PageTask(context.Context, *PageTaskRequest) (*PageTaskReply, error)
	PageTaskValue(context.Context, *PageTaskValueRequest) (*PageTaskValueReply, error)
	UpdateBanner(context.Context, *UpdateBannerRequest) (*emptypb.Empty, error)
	UpdateNews(context.Context, *UpdateNewsRequest) (*emptypb.Empty, error)
	UpdateNewsClassify(context.Context, *UpdateNewsClassifyRequest) (*emptypb.Empty, error)
	UpdateResourceClassify(context.Context, *UpdateResourceClassifyRequest) (*emptypb.Empty, error)
	UpdateResourceContent(context.Context, *UpdateResourceRequest) (*emptypb.Empty, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error)
	UpdateTaskValue(context.Context, *UpdateTaskValueRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/party-affairs/client/v1/news/classify", _Service_AllNewsClassify0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/news/classify", _Service_AllNewsClassify1_HTTP_Handler(srv))
	r.POST("/party-affairs/admin/v1/news/classify", _Service_AddNewsClassify0_HTTP_Handler(srv))
	r.PUT("/party-affairs/admin/v1/news/classify", _Service_UpdateNewsClassify0_HTTP_Handler(srv))
	r.DELETE("/party-affairs/admin/v1/news/classify", _Service_DeleteNewsClassify0_HTTP_Handler(srv))
	r.GET("/party-affairs/client/v1/news/contents", _Service_PageNewsContent0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/news/contents", _Service_PageNewsContent1_HTTP_Handler(srv))
	r.GET("/party-affairs/client/v1/news/content", _Service_GetNewsContent0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/news/content", _Service_GetNewsContent1_HTTP_Handler(srv))
	r.POST("/party-affairs/admin/v1/news/content", _Service_AddNews0_HTTP_Handler(srv))
	r.PUT("/party-affairs/admin/v1/news/content", _Service_UpdateNews0_HTTP_Handler(srv))
	r.DELETE("/party-affairs/admin/v1/news/content", _Service_DeleteNews0_HTTP_Handler(srv))
	r.GET("/party-affairs/client/v1/resource/classify", _Service_AllResourceClassify0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/resource/classify", _Service_AllResourceClassify1_HTTP_Handler(srv))
	r.POST("/party-affairs/admin/v1/resource/classify", _Service_AddResourceClassify0_HTTP_Handler(srv))
	r.PUT("/party-affairs/admin/v1/resource/classify", _Service_UpdateResourceClassify0_HTTP_Handler(srv))
	r.DELETE("/party-affairs/admin/v1/resource/classify", _Service_DeleteResourceClassify0_HTTP_Handler(srv))
	r.GET("/party-affairs/client/v1/resource/contents", _Service_PageResourceContent0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/resource/contents", _Service_PageResourceContent1_HTTP_Handler(srv))
	r.GET("/party-affairs/client/v1/resource/content", _Service_GetResourceContent0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/resource/content", _Service_GetResourceContent1_HTTP_Handler(srv))
	r.POST("/party-affairs/admin/v1/resource/content", _Service_AddResourceContent0_HTTP_Handler(srv))
	r.PUT("/party-affairs/admin/v1/resource/content", _Service_UpdateResourceContent0_HTTP_Handler(srv))
	r.DELETE("/party-affairs/admin/v1/resource/content", _Service_DeleteResourceContent0_HTTP_Handler(srv))
	r.GET("/party-affairs/client/v1/banners", _Service_AllBanner0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/banners", _Service_AllBanner1_HTTP_Handler(srv))
	r.POST("/party-affairs/admin/v1/banner", _Service_AddBanner0_HTTP_Handler(srv))
	r.PUT("/party-affairs/admin/v1/banner", _Service_UpdateBanner0_HTTP_Handler(srv))
	r.DELETE("/party-affairs/admin/v1/banner", _Service_DeleteBanner0_HTTP_Handler(srv))
	r.GET("/party-affairs/client/v1/tasks", _Service_PageTask0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/tasks", _Service_PageTask1_HTTP_Handler(srv))
	r.GET("/party-affairs/client/v1/task", _Service_GetTask0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/task", _Service_GetTask1_HTTP_Handler(srv))
	r.POST("/party-affairs/admin/v1/task", _Service_AddTask0_HTTP_Handler(srv))
	r.PUT("/party-affairs/admin/v1/task", _Service_UpdateTask0_HTTP_Handler(srv))
	r.DELETE("/party-affairs/admin/v1/task", _Service_DeleteTask0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/task/values", _Service_PageTaskValue0_HTTP_Handler(srv))
	r.GET("/party-affairs/client/v1/task/value", _Service_GetTaskValue0_HTTP_Handler(srv))
	r.GET("/party-affairs/admin/v1/task/value", _Service_GetTaskValue1_HTTP_Handler(srv))
	r.POST("/party-affairs/client/v1/task/value", _Service_AddTaskValue0_HTTP_Handler(srv))
	r.PUT("/party-affairs/client/v1/task/value", _Service_UpdateTaskValue0_HTTP_Handler(srv))
	r.DELETE("/party-affairs/admin/v1/task/value", _Service_DeleteTaskValue0_HTTP_Handler(srv))
}

func _Service_AllNewsClassify0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllNewsClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllNewsClassify(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllNewsClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AllNewsClassify1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllNewsClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllNewsClassify(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllNewsClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddNewsClassify0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddNewsClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddNewsClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddNewsClassify(ctx, req.(*AddNewsClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateNewsClassify0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNewsClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateNewsClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateNewsClassify(ctx, req.(*UpdateNewsClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteNewsClassify0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNewsClassifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteNewsClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteNewsClassify(ctx, req.(*DeleteNewsClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageNewsContent0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageNewsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageNewsContent(ctx, req.(*PageNewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageNewsReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PageNewsContent1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageNewsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageNewsContent(ctx, req.(*PageNewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageNewsReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetNewsContent0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNewsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetNewsContent(ctx, req.(*GetNewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*News)
		return ctx.Result(200, reply)
	}
}

func _Service_GetNewsContent1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNewsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetNewsContent(ctx, req.(*GetNewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*News)
		return ctx.Result(200, reply)
	}
}

func _Service_AddNews0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddNewsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddNews)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddNews(ctx, req.(*AddNewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateNews0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNewsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateNews)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateNews(ctx, req.(*UpdateNewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteNews0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNewsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteNews)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteNews(ctx, req.(*DeleteNewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_AllResourceClassify0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllResourceClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllResourceClassify(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllResourceClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AllResourceClassify1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllResourceClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllResourceClassify(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllResourceClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddResourceClassify0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddResourceClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddResourceClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddResourceClassify(ctx, req.(*AddResourceClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateResourceClassify0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateResourceClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResourceClassify(ctx, req.(*UpdateResourceClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteResourceClassify0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceClassifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteResourceClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteResourceClassify(ctx, req.(*DeleteResourceClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageResourceContent0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageResourceContent(ctx, req.(*PageResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PageResourceContent1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageResourceContent(ctx, req.(*PageResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetResourceContent0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetResourceContent(ctx, req.(*GetResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Resource)
		return ctx.Result(200, reply)
	}
}

func _Service_GetResourceContent1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetResourceContent(ctx, req.(*GetResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Resource)
		return ctx.Result(200, reply)
	}
}

func _Service_AddResourceContent0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddResourceContent(ctx, req.(*AddResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateResourceContent0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResourceContent(ctx, req.(*UpdateResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteResourceContent0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteResourceContent(ctx, req.(*DeleteResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_AllBanner0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllBanner(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllBannerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AllBanner1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllBanner(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllBannerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddBanner0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddBannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddBanner(ctx, req.(*AddBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateBanner0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateBanner(ctx, req.(*UpdateBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteBanner0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBannerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteBanner(ctx, req.(*DeleteBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageTask0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageTask(ctx, req.(*PageTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageTaskReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PageTask1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageTask(ctx, req.(*PageTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageTaskReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetTask0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTask(ctx, req.(*GetTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Task)
		return ctx.Result(200, reply)
	}
}

func _Service_GetTask1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTask(ctx, req.(*GetTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Task)
		return ctx.Result(200, reply)
	}
}

func _Service_AddTask0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddTask(ctx, req.(*AddTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateTask0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateTask(ctx, req.(*UpdateTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteTask0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteTask(ctx, req.(*DeleteTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageTaskValue0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageTaskValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageTaskValue(ctx, req.(*PageTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageTaskValueReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetTaskValue0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTaskValue(ctx, req.(*GetTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskValue)
		return ctx.Result(200, reply)
	}
}

func _Service_GetTaskValue1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTaskValue(ctx, req.(*GetTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskValue)
		return ctx.Result(200, reply)
	}
}

func _Service_AddTaskValue0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddTaskValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddTaskValue(ctx, req.(*AddTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateTaskValue0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTaskValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateTaskValue(ctx, req.(*UpdateTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteTaskValue0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTaskValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteTaskValue(ctx, req.(*DeleteTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddBanner(ctx context.Context, req *AddBannerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddNews(ctx context.Context, req *AddNewsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddNewsClassify(ctx context.Context, req *AddNewsClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddResourceClassify(ctx context.Context, req *AddResourceClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddResourceContent(ctx context.Context, req *AddResourceRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddTask(ctx context.Context, req *AddTaskRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddTaskValue(ctx context.Context, req *AddTaskValueRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AllBanner(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllBannerReply, err error)
	AllNewsClassify(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllNewsClassifyReply, err error)
	AllResourceClassify(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllResourceClassifyReply, err error)
	DeleteBanner(ctx context.Context, req *DeleteBannerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteNews(ctx context.Context, req *DeleteNewsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteNewsClassify(ctx context.Context, req *DeleteNewsClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteResourceClassify(ctx context.Context, req *DeleteResourceClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteResourceContent(ctx context.Context, req *DeleteResourceRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteTask(ctx context.Context, req *DeleteTaskRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteTaskValue(ctx context.Context, req *DeleteTaskValueRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetNewsContent(ctx context.Context, req *GetNewsRequest, opts ...http.CallOption) (rsp *News, err error)
	GetResourceContent(ctx context.Context, req *GetResourceRequest, opts ...http.CallOption) (rsp *Resource, err error)
	GetTask(ctx context.Context, req *GetTaskRequest, opts ...http.CallOption) (rsp *Task, err error)
	GetTaskValue(ctx context.Context, req *GetTaskValueRequest, opts ...http.CallOption) (rsp *TaskValue, err error)
	PageNewsContent(ctx context.Context, req *PageNewsRequest, opts ...http.CallOption) (rsp *PageNewsReply, err error)
	PageResourceContent(ctx context.Context, req *PageResourceRequest, opts ...http.CallOption) (rsp *PageResourceReply, err error)
	PageTask(ctx context.Context, req *PageTaskRequest, opts ...http.CallOption) (rsp *PageTaskReply, err error)
	PageTaskValue(ctx context.Context, req *PageTaskValueRequest, opts ...http.CallOption) (rsp *PageTaskValueReply, err error)
	UpdateBanner(ctx context.Context, req *UpdateBannerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateNews(ctx context.Context, req *UpdateNewsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateNewsClassify(ctx context.Context, req *UpdateNewsClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateResourceClassify(ctx context.Context, req *UpdateResourceClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateResourceContent(ctx context.Context, req *UpdateResourceRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateTask(ctx context.Context, req *UpdateTaskRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateTaskValue(ctx context.Context, req *UpdateTaskValueRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/banner"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddNews(ctx context.Context, in *AddNewsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/news/content"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddNews))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddNewsClassify(ctx context.Context, in *AddNewsClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/news/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddNewsClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddResourceClassify(ctx context.Context, in *AddResourceClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/resource/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddResourceClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddResourceContent(ctx context.Context, in *AddResourceRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/resource/content"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddResourceContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddTask(ctx context.Context, in *AddTaskRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddTaskValue(ctx context.Context, in *AddTaskValueRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/client/v1/task/value"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllBanner(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllBannerReply, error) {
	var out AllBannerReply
	pattern := "/party-affairs/admin/v1/banners"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllNewsClassify(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllNewsClassifyReply, error) {
	var out AllNewsClassifyReply
	pattern := "/party-affairs/admin/v1/news/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllNewsClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllResourceClassify(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllResourceClassifyReply, error) {
	var out AllResourceClassifyReply
	pattern := "/party-affairs/admin/v1/resource/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllResourceClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/banner"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteNews(ctx context.Context, in *DeleteNewsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/news/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteNews))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteNewsClassify(ctx context.Context, in *DeleteNewsClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/news/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteNewsClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteResourceClassify(ctx context.Context, in *DeleteResourceClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/resource/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteResourceClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteResourceContent(ctx context.Context, in *DeleteResourceRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/resource/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteResourceContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/task"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteTaskValue(ctx context.Context, in *DeleteTaskValueRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/task/value"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetNewsContent(ctx context.Context, in *GetNewsRequest, opts ...http.CallOption) (*News, error) {
	var out News
	pattern := "/party-affairs/admin/v1/news/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetNewsContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetResourceContent(ctx context.Context, in *GetResourceRequest, opts ...http.CallOption) (*Resource, error) {
	var out Resource
	pattern := "/party-affairs/admin/v1/resource/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetResourceContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetTask(ctx context.Context, in *GetTaskRequest, opts ...http.CallOption) (*Task, error) {
	var out Task
	pattern := "/party-affairs/admin/v1/task"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetTaskValue(ctx context.Context, in *GetTaskValueRequest, opts ...http.CallOption) (*TaskValue, error) {
	var out TaskValue
	pattern := "/party-affairs/admin/v1/task/value"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageNewsContent(ctx context.Context, in *PageNewsRequest, opts ...http.CallOption) (*PageNewsReply, error) {
	var out PageNewsReply
	pattern := "/party-affairs/admin/v1/news/contents"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageNewsContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageResourceContent(ctx context.Context, in *PageResourceRequest, opts ...http.CallOption) (*PageResourceReply, error) {
	var out PageResourceReply
	pattern := "/party-affairs/admin/v1/resource/contents"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageResourceContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageTask(ctx context.Context, in *PageTaskRequest, opts ...http.CallOption) (*PageTaskReply, error) {
	var out PageTaskReply
	pattern := "/party-affairs/admin/v1/tasks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageTaskValue(ctx context.Context, in *PageTaskValueRequest, opts ...http.CallOption) (*PageTaskValueReply, error) {
	var out PageTaskValueReply
	pattern := "/party-affairs/admin/v1/task/values"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/banner"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateNews(ctx context.Context, in *UpdateNewsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/news/content"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateNews))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateNewsClassify(ctx context.Context, in *UpdateNewsClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/news/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateNewsClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateResourceClassify(ctx context.Context, in *UpdateResourceClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/resource/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateResourceClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateResourceContent(ctx context.Context, in *UpdateResourceRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/resource/content"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateResourceContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/admin/v1/task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateTaskValue(ctx context.Context, in *UpdateTaskValueRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/party-affairs/client/v1/task/value"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
